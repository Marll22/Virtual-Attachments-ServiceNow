<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[/* global document */
/* eslint no-undef: "error" */
function uploadVirtualAttachment(form) {
	form.target="va_upload_target";
	
	var name = document.getElementById("va_name");
	var url = document.getElementById("va_url");
	var loading = document.getElementById("va_loading");
	var name_error = document.getElementById("va_name_error");
	var url_error = document.getElementById("va_url_error");
	var record_table_name = document.getElementById("record_table_name").value;
	var record_sys_id = document.getElementById("record_sys_id").value;
	if (url.value && name.value && record_table_name && record_sys_id) {
		loading.style.display = '';
		url.parentNode.classList.remove('has-error');
		name.parentNode.classList.remove('has-error');
		name_error.style.display = url_error.style.display = 'none';
		return true;		
	} else {
		if (!url.value) {
			url.parentNode.classList.add('has-error');
			name_error.style.display = '';
		}
		
		if (!name.value) {
			name.parentNode.classList.add('has-error');
			url_error.style.display = '';
		}
	}
	
	return false;
}

function setFilenameFromURL(url) {
	var nameNode = document.getElementById('va_name');
	if (url && !nameNode.value) {
		var matches = url.match(/[^/=\\&?]+\.\w{3,4}(?=([?&].*$|$))/g) || [];
		if (matches && matches.length) {
			nameNode.value = matches[matches.length - 1];
		}
	}
}]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_376096_va_virtual_attachment_upload.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<!--
MIT License

Copyright (c) 2022 Markus Kraus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
	<g:evaluate var="jvar_instance_url" expression="gs.getProperty('glide.servlet.uri').replace(/\/+$/, '')" />
	<g:evaluate var="jvar_file_url" expression="gs.getMessage('File URL')" />
	<g:evaluate var="jvar_file_name" expression="gs.getMessage('File Name')" />
	<g:evaluate var="jvar_url_missing" expression="gs.getMessage('invalid_missing_mandatory', gs.getMessage('File URL'))" />
	<g:evaluate var="jvar_name_missing" expression="gs.getMessage('invalid_missing_mandatory', gs.getMessage('File Name'))" />
	<g:evaluate var="jvar_upload_success" expression="RP.getParameterValue('va_upload_success')" />
	<script>
		if ("${jvar_upload_success}" == "true") {
			debugger;
			window.parent.postMessage('va_upload_success', '${jvar_instance_url}');
		}
		
		window.addEventListener("message", function (event) {
			debugger;
			if (event.origin != '${jvar_instance_url}') {
				return;
			}
		
			if (event.data == 'va_upload_success') {
				document.getElementById('va_url').value = '';
				document.getElementById('va_name').value = '';
				document.getElementById('va_loading').style.display = 'none';
			}
		});
	</script>
	<g:ui_form onsubmit="return uploadVirtualAttachment(this)">
		<input id="record_table_name" type="hidden" name="record_table_name" value="${sysparm_record_table_name}" />
		<input id="record_sys_id" type="hidden" name="record_sys_id" value="${sysparm_record_sys_id}" />
		<div class="form-group">
			<label for="va_url" class="control-label">${jvar_file_url}</label>
			<input id="va_url" name="va_url" type="url" class="form-control" onchange="setFilenameFromURL(this.value);" />
			<p id="va_url_error" class="help-block" style="display: none;">${jvar_url_missing}</p>
		</div>
		<div class="form-group">
			<label for="va_name" class="control-label">${jvar_file_name}</label>
			<input id="va_name" name="va_name" class="form-control" />
			<p id="va_name_error" class="help-block" style="display: none;">${jvar_name_missing}</p>
		</div>
		<div class="form-group">
			<img id="va_loading" alt="${gs.getMessage('Please Wait')}" src="images/please_wait.gifx" style="margin: 6px 3px; display: none;" />
		</div>
		<button type="submit" class="btn btn-default pull-right">${gs.getMessage('Add')}</button>
	</g:ui_form>
	<iframe name="va_upload_target" src="blank.do?sysparm_domain_restore=false" style="position:fixed;clip: rect(0,0,0,0);width:100%;height:0;border:0px solid #fff;" tabindex="-1" title="Attachments"></iframe>
</j:jelly>]]></html>
        <name>virtual_attachment_upload</name>
        <processing_script><![CDATA[/* global request, response */
/* global GlideRecord, GlideRecordSecure, GlideSysAttachment */
/* eslint no-undef: "error" */
(function (request, response) {
	// request [GlideServletRequest]
	// https://developer.servicenow.com/dev.do#!/reference/api/sandiego/server/no-namespace/c_GlideServletRequestScopedAPI
	
	// response [GlideServletResponse]
	// https://developer.servicenow.com/dev.do#!/reference/api/sandiego/server/no-namespace/c_GlideServletResponseScopedAPI
	
	// this
	// [represents the values from the <g:ui_form>]
	
	if (this.record_table_name && this.record_sys_id && this.va_name && this.va_url) {
		var recordGr = new GlideRecordSecure(this.record_table_name);
		recordGr.addQuery('sys_id', this.record_sys_id);
		recordGr.setLimit(1);
		recordGr.query();
		if (recordGr.next()) {
			var gsa = new GlideSysAttachment();
			var parts = this.va_name.split('.');
			
			var tfGr = new GlideRecord('x_376096_va_template_file');
			tfGr.addJoinQuery('sys_attachment', 'file', 'sys_id')
				.addCondition('file_name', 'ENDSWITH', parts[parts.length - 1]);
			tfGr.setLimit(1);
			tfGr.query();
			
			var handled = false;
			var newAttSysId;
			if (tfGr.next()) {
				var attGr = new GlideRecord('sys_attachment');
				attGr.addQuery('sys_id', tfGr.getValue('file'));
				attGr.setLimit(1);
				attGr.query();
				if (attGr.next()) {
					var attStream = gsa.getContentStream(attGr.sys_id);
					handled = true;
					newAttSysId = gsa.writeContentStream(recordGr, this.va_name, attGr.content_type, attStream);
				}
			}
			
			if (!handled) {
				newAttSysId = gsa.write(recordGr, this.va_name, 'text/plain', this.va_url);
			}
			
			if (newAttSysId) {
				var vattGr = new GlideRecord('x_376096_va_virtual_attachment');
				vattGr.newRecord();
				vattGr.attachment = newAttSysId;
				vattGr.url = this.va_url;
				vattGr.insert();
			}
		}
	}
	
	response.sendRedirect("x_376096_va_virtual_attachment_upload.do?va_upload_success=true");
	
}).call(this, request, response);]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-04 08:45:50</sys_created_on>
        <sys_id>7ebee02c87bd111021d6fcc5dabb352a</sys_id>
        <sys_name>virtual_attachment_upload</sys_name>
        <sys_package display_value="Virtual Attachments" source="x_376096_va">ccd819ed974911102f77b4b3f153af19</sys_package>
        <sys_policy/>
        <sys_scope display_value="Virtual Attachments">ccd819ed974911102f77b4b3f153af19</sys_scope>
        <sys_update_name>sys_ui_page_7ebee02c87bd111021d6fcc5dabb352a</sys_update_name>
    </sys_ui_page>
</record_update>
